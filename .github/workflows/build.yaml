name: Build Fedora CoreOS ISO

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [trigger-workflow]

jobs:
  build-coreos:
    runs-on: metal-cosa

    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.FEDORA_COREOS_CONFIG_DEPLOY_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Fedora CoreOS config repository
        uses: actions/checkout@v4
        with:
          repository: hauke-cloud/fedora-coreos-config
          ref: stable
          path: src/config
          ssh-key: ${{ secrets.FEDORA_COREOS_CONFIG_DEPLOY_KEY }}

      - name: Init Fedora CoreOS assembler
        run: |
          cosa init --force /dev/null

      - name: Build coreos packages with Fedora CoreOS assembler
        run: |
          cosa build

      - name: Build metal
        run: |
          cosa build metal

      - name: Build metal4k
        run: |
          cosa build metal4k

      - name: Build live image with Fedora CoreOS assembler
        run: |
          cosa buildextend-live

      - name: List files
        run: ls -R builds/latest/x86_64/

      - name: Cache builds directory
        uses: actions/cache@v3
        with:
          path: builds
          key: builds-${{ github.sha }}

  prepare:
    runs-on: metal-cosa
    needs: build-coreos
    outputs:
      architectures: ${{ steps.architectures.outputs.architectures }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore builds cache
        uses: actions/cache@v3
        with:
          path: builds
          key: builds-${{ github.sha }}
          restore-keys: |
            builds-

      - name: Execute rename-build-files.sh
        working-directory: builds
        run: |
          chmod +x ../scripts/rename-build-files.sh
          ../scripts/rename-build-files.sh
          ls -R output

      - name: List architecture directories
        id: architectures
        run: |
          ARCHITECTURES=$(ls builds/output)
          echo "Found architectures: $ARCHITECTURES"
          ARCHITECTURES_ARRAY=$(echo $ARCHITECTURES | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "architectures=$ARCHITECTURES_ARRAY" >> $GITHUB_OUTPUT

  build-images:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: ${{ fromJson(needs.prepare.outputs.architectures) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore builds cache
        uses: actions/cache@v3
        with:
          path: builds
          key: builds-${{ github.sha }}
          restore-keys: |
            builds-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push for ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          file: deploy/container/Dockerfile
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ matrix.arch }}-latest
          platforms: linux/${{ matrix.arch }}
          build-args: |
            BUILD_DIR=builds/output/${{ matrix.arch }}

      - name: Upload ISO file for ${{ matrix.arch }}
        uses: actions/upload-artifact@v3
        with:
          name: latest-live-${{ matrix.arch }}.iso
          path: builds/output/${{ matrix.arch }}/latest-live.${{ matrix.arch }}.iso
