name: Build Fedora CoreOS ISO

on:
  push:
    branches:
      - main
      - dev
      - features/**
  pull_request:
    branches:
      - main
      - dev
      - features/**
  repository_dispatch:
    types: [trigger-workflow]

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      docker_tag: ${{ steps.set-docker-tag.outputs.docker_tag }}
      release_name: ${{ steps.set-release.outputs.release_name }}
      release_tag: ${{ steps.set-release.outputs.release_tag }}

    steps:
      - name: Determine Docker Tag
        id: set-docker-tag
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "trigger-workflow" && "${{ github.event.client_payload.tag_name }}" != "" ]]; then
            TAG="${{ github.event.client_payload.tag_name }}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAG="latest"
          elif [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            TAG="dev"
          else
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
            TAG="feature-${BRANCH_NAME}"
          fi
          echo "docker_tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Determine Release Name And Tag
        id: set-release
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "release_name=latest" >> $GITHUB_OUTPUT
            echo "release_tag=latest" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/heads/dev ]]; then
            echo "release_name=dev" >> $GITHUB_OUTPUT
            echo "release_tag=dev" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            tag_name=$(echo $GITHUB_REF | sed 's/refs\/tags\///')
            echo "release_name=release $tag_name" >> $GITHUB_OUTPUT
            echo "release_tag=$tag_name" >> $GITHUB_OUTPUT
          fi

  build-coreos:
    needs: prepare
    runs-on: metal-cosa
    outputs:
      architectures: ${{ steps.architectures.outputs.architectures }}

    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.FEDORA_COREOS_CONFIG_DEPLOY_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Fedora CoreOS config repository
        uses: actions/checkout@v4
        with:
          repository: hauke-cloud/fedora-coreos-config
          ref: ${{ github.ref_name == 'main' && 'stable' || 'dev' }}
          path: src/config
          ssh-key: ${{ secrets.FEDORA_COREOS_CONFIG_DEPLOY_KEY }}

      - name: Init Fedora CoreOS assembler
        run: |
          cosa init --force /dev/null

      - name: Build coreos packages with Fedora CoreOS assembler
        run: |
          cosa build

      - name: Build metal
        run: |
          cosa buildextend-metal

      - name: Build metal4k
        run: |
          cosa buildextend-metal4k

      - name: Build qemu
        run: |
          cosa buildextend-qemu

      - name: Build live image with Fedora CoreOS assembler
        run: |
          cosa buildextend-live

      - name: List files
        run: ls -R builds

      - name: Collect artifacts
        working-directory: builds
        run: |
          chmod +x ../scripts/collect-artifacts.sh
          ../scripts/collect-artifacts.sh

      - name: Compress raw/iso files
        working-directory: builds
        shell: bash
        run: |
          shopt -s globstar
          cwd="$(pwd)"
          for archive in **/*.{raw,iso,qcow2}; do
            echo "Switching to $(dirname ${archive})"
            cd "$(dirname ${archive})"

            echo "Compress $(basename ${archive}) to $(basename ${archive}).xz"
            xz -z1 "$(basename ${archive})"

            echo "Generating sha256sum for $(basename ${archive}).xz"
            sha256sum "$(basename ${archive}).xz" > "$(basename ${archive}).xz.sha256"

            echo "Switching back to ${cwd}"
            cd "${cwd}"
          done

      - name: List architecture directories
        id: architectures
        run: |
          ARCHITECTURES=$(ls builds/output)
          echo "Found architectures: $ARCHITECTURES"
          ARCHITECTURES_ARRAY=$(echo $ARCHITECTURES | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "architectures=$ARCHITECTURES_ARRAY" >> $GITHUB_OUTPUT

      - name: Cache builds directory
        uses: actions/cache@v3
        with:
          path: builds
          key: builds-${{ github.sha }}

  build-container-images:
    needs:
      - build-coreos
      - prepare

    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: ${{ fromJson(needs.build-coreos.outputs.architectures) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore builds cache
        uses: actions/cache@v3
        with:
          path: builds
          key: builds-${{ github.sha }}
          restore-keys: |
            builds-

      - name: Debug output
        run: |
          ls -R builds

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build and push for ${{ matrix.arch }}
        uses: docker/build-push-action@v5
        with:
          file: deploy/container/Dockerfile
          context: .
          push: ${{ github.event_name == 'push' || github.event_name == 'repository_dispatch' }}
          tags: ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.docker_tag }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            BUILD_DIR=builds/output
            ARCH=${{ matrix.arch }}
          labels: |
            org.opencontainers.image.title="${{ github.repository }}"
            org.opencontainers.image.description="This images uses a nginx to offer the iPXE image for hauke.cloud Fedora CoreOS"
            org.opencontainers.image.version="${{ needs.prepare.outputs.docker_tag }}"
            org.opencontainers.image.vendor="hauke.cloud"
            org.opencontainers.image.source="https://github.com/hauke-cloud/fedora-coreos-images"
            org.opencontainers.image.licenses="GPL v.3.0"

  create-release:
    needs:
      - build-coreos
      - prepare

    runs-on: ubuntu-latest

    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create or Update Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.prepare.outputs.release_tag }}
          name: ${{ needs.prepare.outputs.release_name }}
          draft: false
          removeArtifacts: true
          allowUpdates: true
          makeLatest: ${{ needs.prepare.outputs.release_tag == 'main' }}
          prerelease: ${{ needs.prepare.outputs.release_tag == 'dev' }}
          body: |
            This release includes the following Docker images:

            - `docker pull ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.docker_tag }}`

  upload-artifact-to-release:
    needs:
      - prepare
      - build-coreos
      - create-release

    runs-on: ubuntu-latest

    name: "Upload ${{ matrix.file }} ${{ matrix.arch }}"

    outputs:
      download_url: ${{ steps.upload-artifact.outputs.browser_download_url }}

    strategy:
      matrix:
        arch: ${{ fromJson(needs.build-coreos.outputs.architectures) }}
        file:
          - live.iso.xz
          - metal.raw.xz
          - metal4k.raw.xz
          - qemu.qcow2.xz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Restore builds cache
        uses: actions/cache@v3
        with:
          path: builds
          key: builds-${{ github.sha }}
          restore-keys: |
            builds-

      - name: Upload artifact to release
        uses: actions/upload-release-asset@v1
        id: upload-artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: builds/output/${{ matrix.arch }}/${{ matrix.file }}
          asset_name: ${{ matrix.arch }}_${{ matrix.file }}
          asset_content_type: application/x-iso9660-image

      - name: Upload sha256sum of artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: builds/output/${{ matrix.arch }}/${{ matrix.file }}.sha256
          asset_name: ${{ matrix.arch }}_${{ matrix.file }}.sha256
          asset_content_type: application/x-iso9660-image

  trigger_packer_pipelines:
    needs:
      - prepare
      - upload-artifact-to-release
    runs-on: ubuntu-latest

    name: Trigger Packer pipelines to create server images out of CoreOS images

    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Trigger another workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ steps.generate_token.outputs.token }}
          repository: hauke-cloud/packer-fedora-coreos
          event-type: trigger-${{ needs.prepare.outputs.release_tag }}
          client-payload: |
            {
              "coreos_url": "${{ needs['Upload metal.raw.xz x86_64'].outputs.download_url }}"
            }
